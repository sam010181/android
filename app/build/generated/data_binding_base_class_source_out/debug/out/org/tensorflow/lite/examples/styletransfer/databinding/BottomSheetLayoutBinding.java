// Generated by view binder compiler. Do not edit!
package org.tensorflow.lite.examples.styletransfer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.tensorflow.lite.examples.styletransfer.R;

public final class BottomSheetLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout bottomSheet;

  @NonNull
  public final ImageView bottomSheetArrow;

  @NonNull
  public final TextView logView;

  @NonNull
  public final Button rerunButton;

  @NonNull
  public final Switch switchUseGpu;

  private BottomSheetLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout bottomSheet, @NonNull ImageView bottomSheetArrow,
      @NonNull TextView logView, @NonNull Button rerunButton, @NonNull Switch switchUseGpu) {
    this.rootView = rootView;
    this.bottomSheet = bottomSheet;
    this.bottomSheetArrow = bottomSheetArrow;
    this.logView = logView;
    this.rerunButton = rerunButton;
    this.switchUseGpu = switchUseGpu;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      LinearLayout bottomSheet = (LinearLayout) rootView;

      id = R.id.bottom_sheet_arrow;
      ImageView bottomSheetArrow = rootView.findViewById(id);
      if (bottomSheetArrow == null) {
        break missingId;
      }

      id = R.id.log_view;
      TextView logView = rootView.findViewById(id);
      if (logView == null) {
        break missingId;
      }

      id = R.id.rerun_button;
      Button rerunButton = rootView.findViewById(id);
      if (rerunButton == null) {
        break missingId;
      }

      id = R.id.switch_use_gpu;
      Switch switchUseGpu = rootView.findViewById(id);
      if (switchUseGpu == null) {
        break missingId;
      }

      return new BottomSheetLayoutBinding((LinearLayout) rootView, bottomSheet, bottomSheetArrow,
          logView, rerunButton, switchUseGpu);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
